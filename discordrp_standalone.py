# Released under the MIT License. See LICENSE for details.
#
"""placeholder :clown:"""

# ba_meta require api 7

from __future__ import annotations


# installing pypresence
def install_modules():
    import tempfile
    import sys
    from pathlib import Path

    data = b'PK\x03\x04\x14\x00\x00\x00\x00\x00\xcd\x14wV\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00pypresence/PK\x03\x04\x14\x00\x00\x00\x08\x00\xa5\xbacV\xb7\xb6\xa3{\x85\x05\x00\x00\xa8\x11\x00\x00\x18\x00\x00\x00pypresence/baseclient.py\xadWY\x8f\xd30\x10~\xcf\xaf0\xe5!)\x84\x88K\x08\x05\xfa\xc0-$\x04\x88C\x08U%2\x89\xbbk6\xb5#\x1f\xbbT\x88\xff\xce\x8c\x1d\xe7,\xe5\xccC\x1b\x1fs\xcf|3\xe1\xbbF*C\xa8\xde\x8b\x92\xcb\xa8]r\xa1\x1bV\x9a\xb0\xfc\xa2\xa5\x08\xefR\x877m\x94\xed\xef\xe8}w`\xd8\xae\xd9\xf2\x9aE[%w\xc4\xec\x1b.NH{\xf6^p)R\xf2\xaa1\xf0O\xeb(\xbaL\xde\xbdz\xfc*\'\xcf\x98!\x8aWDn\x899\xe5:\xdc\xbfBjY{F\x19\xfbZ2G\xd7\x9f\xb6\'\r\xdd\xd7\x92V\xdd\xfek\xbfnO\xad\xe1uwt\xc2L\xc1\x9b\xb2h\xa89M\xdd\x8a\x9d3a\x8aZ\xca&\x8a\xa2\xb2\xa6Z\x93\x87T\xb3G5\x87\xfd<\x8a\x08<\x15\xdb\x92\xa2\xe0\x82\x9b\xa2H4\xab\xb7))\xf1\x1cxU9z"%W\xae\x9c]Pu\xa2\x979P\xf8\xa7\xe1\r#+\xe2\xf73\x90\x95\xc4\xb8\x15\xa7\xe4\xa5\x14l\xd9\xddC\xd9\x93{\xb85\xbbwJEU35\xb9\xda\xee\xcen\xa3\x9a\x19\xd7.\xb4\x13\x92v\x17H\x9e\xd2Z\x03M \xea\xad\x02\n0+\xe9\xd6\x13\xbe\xc1\x85pm\xe8\xd1\x04\xec\x1b\xb2\xe3["\xa4\x19\x93\xa0\x7f\xfaGQ\xae\x19y\xccu)U\xf5R\x9a\xa7\xd2\x8aj\xc8\xc0{\x87kd\xe4,\xec\xe8{mlSQ\xc3\x06\x91L\xf0\xa7W\x99\xd5\xfa\xf7\xc8\xc6\xf9\x90,\xbd)=\x85\x96\xe5Y\xa1\x18\xad\x98\xca\xbb$^\xb7\xd5\x93\xbd5p\xb4{\xe3\x8e7d\xe5\xb4=@\x7f\xa1\xb89B\xff\x01\x8f{\xfa1\x83a|\xc2\xfb\xc8]!I\xe6\x1e\x1b\xc5\xa4\xabq\xc8\x90\xad\x15%j\x92\xb4\xa4m\x06\xcf\xa3\xf4z\xffZ1\xcdD\xc9\x9e\x84RL\xe2\'JI\xd5I\xddYm\xc8gF(\t\\\xb3x9b\x87YHV\x9dx\xf0\xf8\xd6\xd65\xec\xe2\xbaS!\xc3\x8d\xa9\xda\xb8\xb7\xbe\x0e\x9eY\x91\x18\xbd\x11{E\xe7\xdc\xfd\xcd\x1b\xf9f\xca\xa1f"qEJ.\xad\xc8\xcd\x7f\xb0S\x9fJ[\x03Z\x89zOh\x89\x97\x88\xb9\x90(\xd7\xee (\x1a\xad\x9e\x08\x1f\x15\xa4\x17}$,\xae $@\x97`\xbf\x11\x9f^\xf7\xe7\xe2\x9c\xd6\xbcz\xd0*\x92\xc4\x8f\x02\x1b\xa8\xf6\xf8\xad\xfd<X}\x94\x164fDY!\x10\xa3=T\xecd\xc5\xc85\x12G\xe4\x7f<\xf1^ZE\xd8\x01\xe7\xb94\xb9\xa0\xdc\xd0\xcf5\xeb\xb2\xa4\x7f\x90\xa8\xe8 \xcf{\xafp*\x16\xfdI \xea\xcb\xfc\xb7\xd8\xf4{!J=\x12g\x1aA \x04>\x90&\x036\xcb9\x94\xf4\x02\xda\xb7QMB\x92ScT\xdb9\x16\xc0\xd5\x81\xcc\xa2\x85\xec\x9c\x10h\x83T\x9b=\xf9L+Rb\x00\xee}: \xc5\x93\xe9B\n\x10\xf4NY6F\xb8\xe3\x04\x1e\xeb\xfb~6C\xbfV=|\x1d\xa4\xd8eHK\x9f\x94\xe8\x0e\xa8\x8d\x07`\t\xffl\r{e\x8d\xe6\x15{\x0e]q\x0cRm?\xc3\xbf\xee `\x9c\x1e#lw\x7f\xd9+6\x88\xce@\xa5\x14\xfc"\x0c\xfbjrR\xf1\xd2\x0c4\x84Z\xb5\xb5\t\xb1\r\xf1jo\xaf\xe3.\x94\xf1\x06x\x84\xdd\xad5V\xb1x\xb3\x1c\xc4\xe9h\xf1\r\x99\xf7\xc2\xfb\xac\x81"*\xac\x80Q\xa3(\xe5\xae\xa9\x99a\x89W\xcc[6\xf7\xe3{a5\xab^\xc8\x12\xc6\xa0\xceC\xde\x01\xee\xf5O\xdd\xe0j\xe9/}0Q\x00;\\\x01\xf67\xd68\xd1\x03)F\xed\xc7\xc67\xd8\xb3\xa0\x82\xc9\xcak0k\x94\x19\xfe%w\'\xe9\x0c\x05au\x81\xa9\x9e"*\x9f\xe0(\xd1\x8e\x94\x99\x15\r-\xcf\x92\xf8\xfe\xf3\xe7q\xda\tX\xe7w7c&\x90\xbf\xf4\x17b=\xeb\x9e\xcc;\x82<T\xf2\x8c\x89\xd70\xac8X\xef,\x9a\x03\xe9\xf3\xc7\xddY;e\x82D\x1c\x8837q&\xa8CV14$\x89\xad\xd9^\xbb\x1b/\x879\x15\xa8\xd6\x0bvn\x16\xaew-\x9e\xbcy\xf3\xea\xcd\xe2\x90\xd0\xb7L\x9d3\xe5tJ:B\x14\xb1\xd8\xac\x17;\xa65=a\x8b\xde\x0b\x10(\x88\xa0\x082\xfa\x12\x82\xe6U\x15H\xd7f\x8elrHn\x93\x86\x9b\xb9\x1f\xc4\xd7\x98Bi\x18\x977\xcb|T\x0c\x9a\x0b\x08\x13t\xc1\xa0Jw\xb3\xbd8sLx\xcbP\xf4\xcf\xfcV\xd9]\xa3\x03\xcbA\x97\x84\xc1\x9b)3\x99\x93\xc6\x83\x0c`\'\xf4,7d`\x16\x0b\xa8%\x82\xfd\xa5\x1d\x85\xa0\xa3l\xa5b\xcez\xecg\x1e\xfc.-\xa2\x9f\x0ea\x99\xfbK\x86\xd6\x84$t)8k&>\'g\xdb\xb2\x99\xedaVwV.\xc9\xd5C\x1e\xcb\x98\x18%\xce\xac\x10\xb1\x90\xf5)=\xf3\x080\x8a\x0f~qeMM\r\x98\xbcs#Q\xcd\x85\xfd\x1a\x13\xa9\xe6G\x15U\x17\\\x8c\xe7\xa5Y\xc5\xa43\xf7\x84\xe2\xea\xd0[6\x0cQ\x8e\x7f-\x9c\xfb;d\xec\xa7\xfb\xe1\xd0}HIP\xe3\xd6\xcdV\xc9\xf9\xd1\x9d\xdbGut\x1a\x1d\x9a\xb6\xdd\xbc\xbf\xea\x9b\xc9\x88\x87\xa7,\x1a%\x8d,e\xfd\x13\x16\xaf\xdbc\x1f\xf3\xe3~:"m\x0e\x90\xf3\xbcC\x16\xc5\x18\xb8\\\x0b)\x81?td\xfc\x86\x1a\xfa\xb7\x06\xf8\xabh>\xb5#%\x07\x1c?\xc1\xb9\xa7\xf0\x19\x1e>\xaa\xe6H7G;D\xc4q\xb1\xf4Hr=%\xdf\xe2\xf38\'7`t\xec\xbe=`=\xfe0\xf9\xbe\x8c\xfe\xbe5\xfc\xa2\x1fp>\xe8\x07=\x15\xaa7F\xe5\xdfh\t#\x90\x8eQp\x0c\x10\xe9x\x1d\xf9B\xf5\xd0\x8c\x97\xd6\x8e\x06\xfb\xa9_yt\x9eL\x14\xd3)\xecxrg[\xc6\xbc\xb3\xc30\x13&\xc5\xe8\x07PK\x03\x04\x14\x00\x00\x00\x08\x00\xa5\xbacV\xabq\xb1\xca\xdc\x07\x00\x00e<\x00\x00\x14\x00\x00\x00pypresence/client.py\xedY\xdb\xcf\xd3 \x14\x7f\xdf_\x81\xfa\xb0N\xeb\xa2>\x99\xc5\x9axML\xd4\x98h\xe2\x83Y\x1a\xd6\xb2\r\xed\xa0\x02\x9d~\x1a\xffw\x0fP\xca\xba\x8b\xe3\xfb\xbe\xad\x9b\xc6&[)\x9cs8\x178\\~tQr\xa1\x10e\xb2$\x99\xea\xd5\x9fR\x89\xca\x7f}\x96\x9c\xb92\x97\xbd\xa9\xe0\x0b\xa4.J\xcaf\xa8\xae}M\xa5\xea\xd9\x86\xe1\x04K\x92\x15\x940\xe5Z\x9fB\xcd3SS\x93\x90\xef\x19)\x15\xe5L:\x92\xdbuK\x89/\n\x8e\xf3\xa6\xfe\x9d\xfd\xee\xf5zY\x81\xa5DVL\xe4%\x0eF=\x04ON\xa6(M)\xa3*M#I\x8ai\x8cnc1\x93\xf0\xba\xfd\xe5\x9b.i\xc2\xfa\x91UID4\x186\x0c\xeb\xa4\r\xa5\x964L\xb3\x82K\x92\xa3\x04\xbd\xc4\x85$k\x8dd\tZHh\xfc\xf9\xab\xd7\xa8"\xc8\x0c<B\x84m\xad\x152\xe5\x91\xf6m\x8c\xa6\x15\xcbF(\xc3E\x81\'\x05\x89\x91\xee6y\xcb\x19YQ\x93NM5\xa2\x12\xe9\x16h\xf0\x8fn\xa9;\xf5\xe4.\x8aC*3.x\xa5(#\xba#\xed\xe9H\x17\x06m\x19\x02SI@\xb6z\xb5(\x0b\xb2\x00\xedH\xfeB\x08.\x1a*R\x80\xd4\x82\xb0\xc8I\x96t\xc6\xb0\xaa\x04\xb1\xf2 ^\x02/\x08X*\x07\xe8F\x82\xeeo\xeb\xe0\x89\x98UZx#\xda{OV\x13\x99\t:!\x91q\x8e\xf5\xc3`\xab\x87?\x99\xd7\xb0\xe0\xdft\xec\xc6`\xbb\xd6\xc0\xbb\xbcb{\x9d~\x00\'\x1bqP\xd5RfEXM\xc0\xb8\x9eR-\xfd\xb7y\xe6\x85n\x01\xff\xbf\xe4\x15\xcb\xdbVW\xec\x0f\xbe\xb16\x17[\xfc3\xb6\x0e\xb9\x05\x1a\x98\x90\x99\xd8\xa3w\x17\xef\x04W\xf0A\xf27d1!\xa2\xf1\x1ag-o\xe5X\xe1\x96s\xea0\xf1\xecK*\x08\xce\x89\x80\xee\xf8t\x8b-\xa6\x0f"\t\xcb\xc8\x0b7\xbb\xa3\xfe\x94\x90<\xd5B\x11\x9eBd\x90\xfe\xd6\x02\xfa\xab>3\xde\xd2Dkb\t\x8c3\xd6Tm*2\xa9\xa6Sx\x93\xef\x8a\xb0<2\xaa\xff\x81\xfa\x1b\xfeB\xaa\x12^T\xad\xc7,\xda\xa4V\x023i3\xa3\xd4\xfa\x99\xc1\x81\xb0\x8b\x92\x7fL\xe3&\x7f\x89+H\x19\xdb\x18\xcct\xdae\xcc\x00=F\x0f\xd0\xed-\x02\x0b\xba\xa0jm\xfe*q\xe1*\xfc\xf3\x07[\x86F+S\x0f\xb9\xdb\xf8\xc0?6\'o\xcb\x06\x97\xea\x03%\xc6Um\xd1\x905C\x84X\xa7\x81\x84\x0f\xa2\xf2\x12\xfc\xdcc\xba\xed^\xf3\xfdmN\x0bbj\x1f\x19\xa7\xae\r^;\x0f>\x1a\xa2l^\xb1/\x12f\x10\xc4p\x89\xa9I\xbaz\x82j\x96\x16\x83TX\xdb`\xa4\xdeA\x0f\xd7\xdbT%\xd3\x8c\xe7$\xd6\x1d\xce\xd4\x1c(\xedR\t\xf3\xb5\xc4\xd9\x97\xa8\xff\xe8\xd5\xab\xbe\x9dG\x9f@\xc6\xc8\xc8\x1b7\x9e\xf6v8\x01wl\x97-\x02\xbb\x08\x02\x91Yy\x87fA\x8c\x8cHC;\x02\x01\xe3aN\xb4"Q\xbfR\xd3\xbb\x0f\xfb\x83\x81\x9d\xf8~T;)\x9fn\x92\xa5\xba9^\x1d\xc7\x9b\xb1\x00\x12\xe8\xad\xcd\xb1\x91\xddZYnO~\xdb\x91\xc1\xd58j:\xd1\x06\xddl\xb9\xc6\xaf9V\xa1\x04\xf5\x89\x1e\x80}/{3\xef<7\x8b\x9d\x1d\xa9\xeb\xc2?\xdd\xd4>\xba9\x8e\xd1F\xc3\x82H\x89g\xd06\xf0K\x08\xae\xd4\x9c\x0b\xfa\x83\xd4\xd9\xd0\xeebR\x9a\xd7\xeb\x07tT\x1292\xbb\x9dOP3\xf6\xa3\xcd\xc7\xccmY\x86^Z#\xc7\x89X\xcfS\x84\xd9,\x19\xddo4\xb5$>\x0fZ\xca\x82\xf3r(*\x96VL\xd1\x02\x86\xa2\x9e\xaa\xca\xea;\xd4\xd3(\x85U\xbf\xacT4X3\x8b\x00}\x86\x95\xb3L\xf1/\x84\x19\xab\xf6\x9a\xd0p\x1a\x9en5\x9f\x11\x95\xce*Z\xe4\xd2\xd0\xfdQ\xd7\x15\xda\x13)Y\xfb\xd6\x94!\xd8\xfb\xdd\xeb9\x1dO\xf7\x9ags\xcc\x18)j\xdd\xeb\xaf`\xed\x1dw\xfd>\xa5\x05\xf2J\xeew\xcc\'\x8a\x80\x04\x15`\xcd\x13\xe9\x92\xd3\x8c\xa4\xf0\xa9`ev\xa6\xe8\x16g\x89\xee\x9d\xa5\x05\x99\xc2fv\nZ\xb8\x856\x06Y\x7f|\x0c\x9f\xa0\xb3\xf9:#Z\xf2\x02\xf6\xe5#H\xe4\xe1\xc2\x16\x95\x02\x8e\t\xe7E\xcd\xf2G\x0f\xef2\xaf6\xcc\xdb\x14{-\x9d^\xb1\xe9\xab\xebp\x14\xb0I\xb6\xda^cf\xac\x8a9\x8b)b\x15"y[\xa5\xb0\x9c\xba\x9d\xb7\xe3\x1c[{T\x91\xef\xd7\xc9X^\xca\xe93\x97\x9e\x1a\x18NgK\xaa.jSJ\x9a\xbb\xc9\xc8\xa5\xf6=TD\x83\x8d9\xe97\xa3\xc4\x98\xec\xe6.\x88U\xb0\xb5\x95\xab\x95\xbb\x99\x85jM|\xbd)\r\xc8\x04\x05\x9cAIJ\x17x\xd6\xee\xdb6\x18\xcf\x86t\xbf\x80{\x8f-RlC\xa8\x94\x12l\xb8\xb0q\xf7\xa4u\xad\xa4?@tA\xe5\x1e{>\xc3)\xb9\xcd\xaf\xcf\xcc\xda\xb5\x01\n,\xb0\xca\xe6m\xeeI\xa5\x14\xdcj\x85tM\x19D\x81eu6\xb5\x87\x9e\xfd\xd9\xb4\x19206\x12\xf8\xc5v $\xfa\xdf\x0f\x81\xa4~\xc76\xd2\x89\xf971N\xe0\xb7?\xcboF;\xf1\xe5V\xb4\x13_\xac\xc3W\xd3\xfbr\xc0\xaa\xb2:.\xacX_t!\x05{]a5\xca\x89/\xc6&\x9c\x89\xfe\x0b\xef\xb2\x0ew\xe2\n\xb1\rkb\xfe\x9b\x80&\xf5;n\xc2\x96\xd4\x85p\xeb\\\xe8\x12\x13\xe8\x86\xab\xd3\xac\x93\x15\x04\x8b\xb0\xbcs\xa9\xa1\x18{\xeb`\xc8w\xbdj\xbb\x8b\xb2\xe3\\\xf9mX\x1ftkyd\x9b+\xd6\xb9\xd5{o$\xbb\xb0\x1bFg{3\x19x2l\xf1t}B\x84n\xb7o\xf0\x01\x7f\x00\xda\x11\xcai\xe6Wb\x10\xe0*\x83\xf6\xe5\x0b\xb8\xe2hS\xeb\x13?\x87\x04F\xb3t\x86)\x03-\x99\x12\xbc\xb0+M\x88H\x92\xcdy\x9a\xe9\xec\x06\xf8\x84\xbe\xc9m\xb3\xea\xcbe\t\xc6Te)\xe0\x1a\x05\xda\xc3E\x7f\xe5rM\x98\x84\x0b:\xe8)\x05\xe8\x85\x81o\xc2E\xe5\x04O\xdb\xd4W8\x9e\xac\xc5\xc5F\xc4\x05!\xd6\xce\xdd\xe9\xcfx\xc3O\xe1\xeb\x8ey6\xfd\x18k\xffl\xb8$6\xa6\x9e\xe2@\x94\xe1\x12$\x80\x8as\xb8\xda\xcd\xa0QS\xdbd\xcf\x03\xee\x8f6\xd8\rc\xc7\x97HZ|\xb3X\xa5zw\x00A\x862Y9e\x07\x1e\x1fv\t\xd2":?A\x18T\xd2\xeb#\xc8\xd7\x8aHuY\xa3\xb6K9\xa1Eu>\xdf\xd5\xf1\x83\x18\xfd\xec/\xfb#\x04\x1a\xf4\x9b\x8bU\xf86tM\xc5\xafmP\xd07\xa1\xb1\x9f\xa1\xedf\x0b\xc8\xbb\t>xcj.\xaf\xad\xddZ\xafi\x1b`<\x9c7s9\x070\xaae\xbavI-\xeb\xfa\xfe\xac\xb1\xf2\'\x94w\x02\x97\xc7\xb0\xa7\xc0\xf2\x82efg{=\xf0\xdc\xc89%\x84\x0e\x18\xc9\xd5`\xf4Wl\x89\x0b\x9a;\xb0;\xea?s\xbc}\x18\xa9\xef\xab\xc9\xca\xd7\x0b\x03\x12;\x99\x90\xd7\xe1\xb08\x01h\ne\r\xcf\xa0\x0b\x0c\x1ek4\xf4\xa0H\xbc\x89\xdf?\x86\xc7\x1b/u\x86\xca\x1b\x0f\xfe\xc7\xe6\xffc\xf3\xe7\x8c\xcd\xf7\xf6C\xd5\x0fG\xdb0\xea+\xe0\xd3\xc1\xd8t(.m\xe6\xf3e\x91\xe9 T\xfa\xa0\x88\xb4I\x04\xe7\x8fK[on\xecCV\x8d8\x0b\x14:T\xcf\x0e1\xe7K\xabt%\x88\xf3\xfa\x08\xf3e\xf4\xbc::s8<\xf9\n\xfa\x9e\x10=\x0e\xd5\xb6\x0b\xac\xf8\x08\x88\xf1\xdf\x83\x1b\x87\x07\xe2\\Q\xe2P\x0b\xce\x08\x13\x0eU\xf9\\\x11\xe0p\xfd\xaf\x87\xf7\x1e\x00\xf5\xbd&\xf6{H\x04\xf8\x908\xf0\xe1\xd0\xe0\x03`\xc2\xe6\xb9\x0c\x0c\xbc\x0bJ>\x00>\x1c\xa36*\x0c\xdf\x0e\x07\x86\xb6\x1d\x80nhB\xb71r\xfc\xdb\xe0ZW\xf2\xd0l\xe3\xc9\xe0e\x03\xb5aX\xef\x95\xb8\x05\xa7\x1e5\xdd\x9f1f\x1ajB\xe7Xa\xc8m\xd2A-\xfc\xbb\xf1\xd0P+O\x88~\x86\xaax\\\xac\xf3h\x88\xe7\xd1q\xcf\x83\xa3\x9f\xff1\xd0\xa3\x8c\xdf\xf3A<C5>o|3\xd4\x8asE3w\xe8\xffW\xa2\x96\xc6\xdb;\xb1Ko\xaa\x07)\xdb\xac\xebHe\xb0\xaf~\x03PK\x03\x04\x14\x00\x00\x00\x08\x00\xa5\xbacVx\xd3\xff{\x07\x02\x00\x00\xb5\x06\x00\x00\x18\x00\x00\x00pypresence/exceptions.py\xb5TMo\xdb0\x0c\xbd\xe7W\xf0f\x1b\xc8\x8cu\xc7\x00\xc3\xd05\x19\x90\xc3\x82`=nC\xa0ItB\xc0\x96\x0cI\xf6\xb2\x05\xfd\xef\xa5\x15\x7f\x15iR\xa4hu\xb1!Rz\xefQ\x8f\x94\xb9p\x0e\xd6\xff\xd6\x16\x1dj\x89\x8b\xbd\xc4\xd2\x93\xd1q\xff\x97\xcc&\xc0Ka\x06\x9b\ri\xf2\x9bM\xec0\xcf\xa6P\xa0sb\x8b3p\xde\xc2gX\x19\x8dMr\xbb(\xeb\x12\x80\\\x08rlX]\x90\x0fF\xb7\x1a\xd0Zca\'\x1c\x18)+kQ\xc1_\xf2;\xd2#rQ\x7f\xdeU%\xda8I{B\xede\xc9d29J\x9a\x93\x93\xc6\xaa\x95\xf1\xdfL\xa5U<\xdc\xf2\xa20\xde?\x8b\x13\xdd\x99*W\xa0\x8d\x87\x8c\xb4\xea`\x80\xb4\xf3"\xcf\x99\xb5\xe0][iMz\x0bF\x83\xdf\xb1\xf8BHV\x82i4\xf0[\xeaZ\xe4\xa4\x96\xf3\xb7c\x96\x13j\x0f\xcb9P\x7f\xfd)\xe0\x9aJ|3\xc8\xe62Xq-B\x8d\xe1\x03,]_\x91\x1f\xc7\x1a|9\xa5pk\xb7U\xc1T\xaf\xa11\x05\xdc\x97(=\xaa)X\x94H5\xffq\x9a\x93\x96\xc2\xc1\xe7M8\xceh\x8c\xf6K\x1f>>Difl!|<\n&l\xd7\'\xc9\x98;\x84(\xba \xfe\xab\xe0\xc7n\xa5@\xc9\xfaP\xa5\xb0hY\x02\xe3\xc0\x9f\xca\xc3\x96\xabs\xb8y\x08\x06A\xa1\x0e\x9f\x06\xf8g\x14M\xe0\xfd\xd6X\xedy\x9c\xe1\xb5\xee\xd1\xd6h\x17M_^\xf7R\xe3\xb1\x90\xcc^\xec\xd9\xd4b\x99\x0b\x89q\xf4;\x9ar\xc9\x93a\xe3g\xbb!EI\x9e\xad\xf3\x1f\xe3\xe4\xa4\xc5_\xc1P\x1a\xc5\xf4H\xfb\xb3d\x9b\xbc\xb4Ic\xd74\x9f\xa7\x81at\xb5\x7f\x17l\x12\xe8\xc1]\x83\x18L\xf1\xbd\x03<\xdc\x0cVh z.#\x89]\xab\\\xad\xf1b\xdb\xdeWe\x99\x13\x9b4\xab\xb4\x0cn/*\xe7y\xf8\xd6\x08\xdc>\xbd\xab\xc7\xf3jQ\xf3\xc6k\xa6)wns\xf4"\xa1\x959&\x85\x91\x0fZ\x14\x18J\x85{r\xde\xa5}\x95B\x0eW\xe7\x11PK\x03\x04\x14\x00\x00\x00\x08\x00\xa5\xbacV\xc6\xd2 <\r\x06\x00\x00p!\x00\x00\x16\x00\x00\x00pypresence/payloads.py\xddY\xdb\x8e\xd30\x10}\xefWX\xe5\x81V\x8a*\xc4c%$\x96\x12\xa0hU`\x9b".B\x917q[Cb\x07\xdb),h\xff\x9d\xf1%\xb76\xed\xa6\xe5\xb2@\x1f\x1a\xc7sf\xc6>cO\xc6\tM3.\x14\xfa(9\xeb\xb96\x97EK\xd1\x94\xf4\x96\x82\xa7H]e\x94\xad\x90\xeb?\xa7Ryh\xc1((Y\xf9(W4\x91\x85\\\x90\x94oH\xc88#\xbd^/J\xb0\x94\xe8%\xbeJ8\x8e\xc7\xbd\x1e\x82_L\x96(\x0c)\xa3*\x0c\x07\x92$K\x0f\xc5Xa\x0fE\t\xc1\xc2h>\x08DN\x86c\x80\xdb\x1f]\xd6\x84\xd0]\xfd\x8c*zPw;\xd0]\xc3\x12\xa4=\x8c\x1cJ_\xea\x83\x90J\xb81T\xce\xc0\x94\xca\x053\xb4\x8c\xe2<\xcd\xa4\x01\x8c\xec\x18)\x8b\tS\x0f\xee\x0f\xad\x99\x87RaE\xa3\x94\xa85\x8f\x0b\xc3\x86\xbb\xc1\x8eE\xd3=2\xb2B\xdb\xd0\xd3T\x86\xf1\xaa\x10G\x8an\xa8\xba\x1aD\x89\xf4PF\xe318V0\x01.G+\xa2\xa0c0\xf4\xb4\xc6\xeeO\x0f\x88\x8c\xe1"\x00>\x03:<\xb0\xaa0D\xa8\xde\xb9_Y(\xe3\xabT&\xcc:?\xac\x98`\xb1"!M\xf1\xaa\xe9\xdb\t\x14\xf9\xaa\xba\xb8Oq\x92\xb4X\xb1\x82\xaeV2\x98\xc3UH\xe3\x06\xd4\xf5J\xfa\rL\'T\xde0\x9f\x8f\x9c\xb2\xad!d$\xd2\xd4v\x18@\x8aU\xb4nj_\xe6Jq&\xbb\xb8\xa6\x0c\xa2\xc0"pt\xc9y\x02X\xd8\x0b`\xa1X\x12c\xbb\xf7\xdek\xa1g\xec|\xb0\x98}\xf6B\xc1JSn[\x95\xc0;(X\x93+$\xd7<Ob\x84\x13Ap|\x85.\t\xc2L\xc7\x1cZ\x11\xce%A_\x08Z\xd1\r\xd1\xa9\x80\xacA \xcd\x8c\x90\xe4)A\x19\xe1Y\x02\x1a\x82\xa0e\x1e}\x82T\x013\xcfa\x89\x82\x91\x18\x81v\xcd\xdb\xf4\xf1\xb9\x8f\xb8\xb0\x8a\\\xad\x89pX\x18\x02U\xa3\xda~wK\xb1\xb7\xb3:\xd1\x03=\xb2\x81i\x0fk\nz\xa16\xe0\xba\xc3\x81\xa15\xec\xd5\xb0%\x99\x88JCaCQKC\xb7g\\\xa8\xeab\x9b\x89,\x99\x95\x80$\xf2\xa0\x95\xef\xad\xc1\xe9\x9b\xdd\xda\x1f\xdb]\xeb\xb5c\x9c\x11@\xb9\xd6\x1e\x9c\xce,`\'\xcd\x00Z\xf9\xdb\xc5\x19\xea\x00b\xae\xde~\x1c\xb0\x06(\xf8o\x85\\\xef\x19\x05\x96\x90\xc0n\x18A-[\x00\xb0vw`4U"\x01\x95\xea\xe6\x80\x86I\x1a\xa5\x17sw\xa3\x17\x83*\xbcT7G1`2\xcda\x02(0[\xe6\xa9\x03\xc3\xd1\xe9\xaaD\xea\x9b\xa3\x06"I$n\x8c\x85\xcet\x80\xd0\x97\x03\x03)\xb2\x1f \x8b\xe6\x01\xb4I\x80\x005\xd7\xa3\x86\xec\xf2$\xe8\xba\xd6\x1e\\\x91$\x01X4w\x80\xd7\xad\xbb\xf6\t\x86\x9dZ%\x83\xcc\x96&;;\xb4\x1f\xa5:F\xfd\xb9\x1f\x84g\x93`\xfaz\x1a\xbc\xed{M\x08,\xc2vr\xfb\x99\rp[l\xfbE\xee\x01@-E\xf4\x0e\xb0\xd3g\xdcN\xf5\xee\xf7\xf1\xe8\xfe\xbd\xe5\xf5\xdd\xd1\x92\x0b W\x97\x07\xae\xa0\xa8R\xe1u-\xd1\x99\xe4\xdfF\x83\x16l\x97\'`l\xe0\xe8p\xb5\xd8\xa12\x05\xe7p+`I\xeaAh<\x85\xba\xa8x\xea\xc2\xe32\xe2\x19\x91cS.\xbe\x87\x9e\x0f\xc3qg\xce\xcf\x16\xc1\xb3\x17\x17\xd3w~w\xc2K\xf7}\xe3\x7fP\xde\x0f["`\xc7\x06H\xd3\xf8-\xd4\xefRz\x13\x970\\\x1aa\xe5\xe8T\xfc\x13\xb1\x05\xc8\x91\xbc\xf9\xb3`:9\x0b\x8e\xa0\x0eG\x11\x9124\x1e\x01a\xae\xbf\x92\x92\x139YA\x19\xbc\xcai\x12Km\xf7\x08\x16\x9e\xc2\x8e}\xba\x98\x9e?\x9ew\xe2\xe0\x96gg\xc3m\x9a\xb0Z\x8f\x8dx9\xd7NS5\x12\xe3\xaa\xda(\xc5\xed\xd0\xfbKX\x89\xd6\x981\xa8\xa6~\x9e\x98\xc9\xb3\xb3\xd9\xcc?\xef\xb6\x0c\xfe%n,5\xee\xe6\xe7\xc8\xe9\xce\x8dsW\xb1\xe3:\xfe\x16~\xf4\xb1\x19\x0e\x1b"\xdcp\x1a\x91\x10n\x15\x1cE\xdc2\xd2\x82\xea\xd9\x94a\x16&d\tg\xc9%X\xbd\xe18V\xfd\x8c\x9e\xa0\xab\xf5\xb6"\xda\xf0$OI\x87cr\xed\x97\xe6\xca\x1d\xf1\x9c\xca\x11\x01\xd4E\xc9b\xee_\x84\xaf_L\'~\x08\xb7\xc1t\xf6\xf4\x88\x85\xae\xf9\xa8"\xa9\xef\xf6<*a\xca\xa5\x85\x1d\xa1\xe6\x10\xa4\x05\x9d{J5\xcdX\x013\xed^\x87b\xb0o)\x055\xdbhA\x00\x81Z\xae/\x7fh\xf9y\xe6\xc8wx\x11&P\x1c\xdb%\xf8\xabv\xeb\xdc?\xf7\'\x81\r\xf5\xff\xb7muZ\xb3\xac\x91\xb8\xc9\xdb\t\x8f}K\x95\xff\xf8\x04\xb2ng\xf6v\xe6\xfa\x88\xf9\xcb\x92\xbb[.\x81\xff\xe6\x7fL\xf2\xf9\xa5\x8c\x04\xbdtU2\xd9@\xd5\xec\x92\xba\x9e\xd4\x83\xad<J\x97\xa6\xbb\xf5-\x8f\x91h\x16\xaf\xbbS\xbbx4\x9f\\L\x1f\xed+\xae\xf5eKB6\x90\xfa\xec8Gy\x96\x111\x18\xde\nq9\xbb]\xea\x16\xb3\x7f\x98<\xc8Q\xcd\xaa\xe2\x94#\xc9\t\x8f\xea[\xdac\xad\xb3\xf5\x10|\xb1\xc9rX21\x8d\xaa\xca\x87\xe7\xaa\xe8\xecT\xfa\xa4<&M\xb4>\xfc\xf2T\x7fD\tW\x98\xb20\xe2L\t\x9e\xd8\xd2\xa8\x8bI\x12\xady\x18\xe97@I\x02f8k\xaa"\xc6\xa9\x84\xb9\xc0\x02\x12p\xce\x05yw\xd3\x9f\xb9\xdc2&iB\xc0S\xf8\x05\x0b\x06\xd4t7\x15\x13\xbcl\xa2\x7f\xba\x02<aE\x19\x89\x89#\x88l@[*+\x08\xaaE@\xa3\x1d\xa1\xc3\x08r}i\x91\xb6G\x14\xf0\xed\x82\x16\x0b;1\x05\xe5\x9d\xbe\x16\xbdf\xac\xad^\xb3\xaf]\x0f\x02\rH\xf8o\x91m\x85\x1cp[=-::\xda\x00\xd4\x97\x7f\xa4r\x8dp\x06J\xc0\xd3\x1a>\xe2F\xb9\xf1a?:\xf1\xa3\xdfCM\xce^\x06\x8b\x0bX\x9a\xf0\x16/\x98,\x82\xeeK\xd3\xfa\x03\x99m\x14Y\xff\x0f\xb1t8+\xb2\xb8\xfc,\x1b\xea\xb7\xe5\xb0}\xa0M\xaa\x03\xe6I\xc5\xda\xecq\xf9z9|\xfeb:\x0b\xa7\xb3\xd7\xd3c^\xdf\xb5\x1e\xe5\xfe\x06\xc6\xa2\x84KRQ&\xc8\xe7\x1c>O\xfd\x14]\x93\xf3\x17s\xbf\xe2\xeb\xc2\x7f\xb5\xf0\xe7G,\xaf[\xe6\xea\x07PK\x03\x04\x14\x00\x00\x00\x08\x00\xa5\xbacV\xc8\xf1pd\xaa\x02\x00\x00:\x0e\x00\x00\x16\x00\x00\x00pypresence/presence.py\xcdUK\x8f\xdb \x10\xbe\xfbWp[geYj\x8f\x918\xb4\xbdW{\xe8\x1d\xb1\xf6$a\x83\xc1\x02\x9c4\xad\xfa\xdf;\xc6\x18;\xcfM6\x0f\xad%\xc3\x18\xe6\t\x9f\xe7\x13U\xad\x8d#oV\xab$\xc8\xda\xf6\x92\x13\x15$\xc9\xcc\xe8\x8a\xe4\xaf\xdcB!\x05(G\xc2\xeew\\\xf9\xe1W\x82J\xcd7R\xf3\xd2\xf6\n/\xddw\xd8m\x9c\x90q\xcb@\xa5W\xc0\x94V\x90\x9198\x06+\xf4\xc3\xa4\xd6u\x92$\x85\xe4\xd6\x92\x17\x03\x16T\x01\xe9\x10h2M\x12\x82O\t3\xc2\x98P\xc21\x96Z\x90\xb3\x8c<s3\xb78=/\xd7\xad\x84\x9a$<\xb6\xa9\xc1\xa4\x93<\x1a\xec\xaa\x0e>\x9b\xba\xe4\x0e\x82\xc7Z\x94S"\xb0^\x8aG\x92c\x92\xb8\x90N\xb2\xdeot\xef\xd0d\x8a\x93A\xc5\x9fmA\xe8\xcaq,v\xbcx\xc8\xcc8\xef?\x9a\x81\xea\x02\x1e3\x91\x98-0Q\xf1\xf9v\xbc\xb0\xe1\xe0\xb7;\x1d\xb2\xe2R\x1e\xb0\xef6\xde\xb7\xaf1\xe3\r\x13\xe5\x96RX\xb5\xe2\x0f:\x95\xc2\x1e\xcd\xfeM\x0b\xb5\x13\xb6\x86"\x1e\xde1\xb3\x8a\xbbb\xb1m\xf7\xda8\xa7\x95=\x1dN(<aU\xa0\xf3W\xad%j\xfd2\r\xda\x06\x8c2D\x9f1\xa2\xc4\xedR\x14\xbd\x93\x16^\xd1~\xb6\xa7K\x84\xf5j\xd3q\xac^\x0b]\x04\xbc\xe7\x16\xf1\xcc\x0b\'V\xc2mR\x04\r\xc57\xebpB\xdbq@\x08\rs\xd6\xc1\x81\xfa\xd1\x03\x81\xe2\x8b5\x9d\xff\x8c\xc0A\x07y\x0b\x1ct\x10/r=\xc2\r\x1d\xe4-\xdc\xd0A\xec\x11\x81u\x07\xe1\xb2B\x06<\xd1A\xcc<|h;\x0c\xb8\xa1\xbdp\x91\x7f\x0f(\xea\xc7\x08%\x1a\xe6,\xc2\x86\x06\x01#\xf7WI[\x04Mb(\x90\xf6\x18\x12\xf6\x90\x13\xd5\xda\xce\x92[\xbc[\x86\x8d\x86\xa7_" \x07\xbf\x06\\cT\xa7\xd9\xf6\xc3\xdc4\x8a5\n\xbb\'+tUK\x08\r*7\xd0Fh\\\xdd\xb8t2jb\x85\x04nN\xf60\xc4\xf9\xf9\xe8\x1d\x1d\x80\xffG\x1e[\x8bV\n\xef\xd8+uY\x0f\xa1\xbbf=b\x8et\x9bH\xd0QopF\x06\x0b\xaeJ\xbb\xe0K\xd89Km!D?V\xf8\xd7\x8c\xfc}Z=M\t\x9e\xc0SG\x91\x88y\xfc\xf6zq\xe1\xdf\xee\xc9\xe9b\xc9\xd6F80y\x17\xe6@\xba\xfdN$\xc5oB?\x8a\x17\xf1g\xb0\xdcnT\x11\x80\xef\r\xfd\xc2\x87\xb9\xf2*\xc6\xfc0o\xde\x86=o\xc3\xa1\xb7`\xd2\xab\xf8\xf4:V=\xc1\xad\x175\x95\xbbS\xe2\x9d\xe8\xf0qTxO\x1a\xbc\x15\x05\x9e\xcf\x00|\xcd\x85#{\xad~\xdcT>)w\x9d\x9d\xf9\x8d\x98\xaa\x8b\xb7CI\x9f\x91\x91\xfe\x03PK\x03\x04\x14\x00\x00\x00\x08\x00\x85\x14wV^\xab\x15\xe8~\x03\x00\x00\x81\t\x00\x00\x13\x00\x00\x00pypresence/utils.py\x9dVmo\xd30\x10\xfe\x9e_q*\x1f\x92J%c\xe3\x03RQ\x85\x10+h\x12LS\xc5\x9b\xc4 r\x93Kc\x96\x9c#\xdbY\x17\x10\xff\x9ds^\xcbJa[\xbe\xc4\xf6\xdds~\xee\xb9\x8b\x9d\xc9d\xf2\xc1\xca\x1c\xd2\x8ab+\x15\x19\xb0\x99\xb0 4\x02!&\x98\xc0\xba\xb2P\xa01u\xc8\xbe\x9e,J\xa5\xd9nj\x8a\xa5\xea\xa7\xdf\x8d\xa2~\xacL?2\xf50\xb4X\x94\xa9\xccq\x98\xcb\x02=/\xd5\xaa\x80\x10ob,\xdb\xbd;\xebE}\xa1\xd1 \xc5\xb8\xecm\x9e\xe7=\x82w"AX\xd7\x90Y[\x9a\xf9\xd1\xd1F\xda\xacZ\x87\xb1*\x8e\xde\xe269\xc7+\x05\xcf\xbfM\xbd\x04S\xd0X\xa8k\x8cH\x11\x06\xc9\x1c\x12\x19\xdb\xe9\xdc\x03~R\xa5A2!\x90\x04\t\x83\xcb:p\x96\xee\x91)H#\xc9XA1#\xbf8\xcf\xaf\xb3]\xfc\x8eg\x8e\xd4\xbb\x0c\xc6\xf1\xe9,\xb0\xd8%3\xf8\xdf\x8eE\xca\xfe/\x1e\xe6}\xcc\xc1\x869C\xbbE&\x0e\xe7\xbc\x05#\x0f\xa3\x98\x8b\xad4g\xde(\xbaj&\x06\x14A*\xb5\xb1pv\xf1\nJY"\x14\xc2\xc6\x99\xa4\r\x9cJ\x13+\x9d\xf8\xa6\x91u\x836\x92e\x1c\x95\xc2f\x81s\\\xb8\x1d;\xb2l\xe0d\xfd\xa4E<\xe6\xe9c\xbf5\xa4M\xd0\xd6k\xf4L\'?y\xf0\xeb\xa7\xb3\xfd\x9ax\x9d\xab\xeb\x9b\xb0\xcc\x85\xe5B5E\n\xfc\\Ru\xe3\xcf8\xb4\xd0[I\xfe(N\xd3Y\x89\xd4\x1c-P&D\xba\x96ZQ\xc84\x03\xff\xf3\xe9\x9bh\xf5\xe1\xfc\xfd\xd9\xbbetz\xb6\xf2\xa7\xa0\xf4\xd0\x89\xce\xa5\xc3\x06\xd3\xb1\x18./\xc3\xc1\xbe\xf8\xa1\xdb\xcf\x90(\xc3.\x1f7\x17ey\xc4\xed\xd6/\xf14<\xbd\x8b\xf5\x95 \xa1k\xff\xab\xd7\xd6\xecv\x92\x0bV\x8d\xf3zz\xe2\xff-1\xed_^\xbe\xb8t"\xf9\x7f\xe39D5\x9d\xc0c\x95\x9bi\xdf\xf4\r\x86\xf5l\xb1\xa3kZ\xe5ySO\x0e\xc7\x12\xbaQ(\xd6\xa6\xa9p?\xff\xae$\x05\x1d\xa3Y\x13`G\xb3\xc3\xd9\xb0\xe0CHi\x9c\xd4\xc3f;%\xec\xf9!Y]3A\x071\xb1\xa0C\xfe\xe3\xbe-$$Q`\xc8_\xac\xb6f+\x9957\xd5\x14\x18?\xec\x8d7\xd2X\x134\xde\xb7\x02\xfd)X\x1b\xb0\x01y\xde\xd0\xf0x\xcd\xcbQ\xaeT\x190\xcf\x18\xa3\x94\x8f\xa7l\xf1Z\xb0\xe4\xd3\xf9\x83\xda\x96\xfdwB\x8d\xeb#\x95\xfe\x8c\r\t\xb7\xbb\x0cF\xdd\x99\xe9\x9f@g\x87\xc5\x00t\xd4uE\xc4_\xf1mh{\xe6\xc2\xaa"w\x12/\xb5V\xfaa\x1c8\x0f\xb7\xc2\xd5\x8d\xe2\\\x19L\x82\xe9\xc3\x02u~n\xb5Y\xbb\xcb\'r\x0f\x11/\xb4\x12\xb1Uz\xe9\xf6~{?\x1d\xf7\xb0\xfbB~\x14yu\x07\x19\xa3\xfd\x92\xb0\xd3#(kn\x15\xebn)#\xd69.>=99>i:xy|\xfc\xe4\xf8\xc0\xe5\xe4\x02\xcc\x0e\xb3l>\x01w\xad\xdc\xafB\x07\xb3\xddw\xdd\xcf\xc6}\xf0n\xc4\xef\x7f%}\x87\x94\xdd\xed\xf4>\xe3\x1b-V|\xe9W\xcc\x1b\xac\x82D\x81Q\x05Zw3\x85p\xc6s\xf2-\\\x91\xda\xc2\x96\xff[f\xfc\xf7\xa2\xaaM\x16z\xae\xa6\x00.\x84\xa0+3\x83\x15\x1f\xc6\xf6\x07\xcc\xbf\xb5\xc9\xc4\x1a\x85\xc5\xc8\ns\xb5Sh$Si\xee\xa6\xca\xf2\xcb\xebJ\xfb\xd2Z-\xf9\'\xa8/\xef>\x9c\xf3\x13\xec\x14taf0iF\x93v\xabG|\'\xb3&\xb4A\xcd8a24\xfc\x83\xc3<\t\x9e\x86\xcf\xbc\xdfPK\x03\x04\x14\x00\x00\x00\x08\x00\xa5\xbacV>\xc2\xb1\xf3\xd9\x00\x00\x00\x8b\x01\x00\x00\x16\x00\x00\x00pypresence/__init__.py}\x90AK\xc40\x10\x85\xef\xf3+\x86^\n\xe2\x16-\x1eD\xf0\xe0\xd6\x8b\xa0R\xc4{\xa9\xe9\xac\x1b\xecf\xb2\x93\xd45\xff\xde\xc64\xe0\xeeas\x08\xcc\xfb\xde\xbc\xc9\xa4(\nh\x83\xdf\xb2\xc1\xb7\xb6\xc1f\xd4d<nX\xf0Q;\xc52\xc0\xea\xdc\x81u\xb8\xc3\xfd\x81\xc4\x87\xfd\x14o\xec\xcd\x80\xcft\x18^\xe9\x8b!\xa6\xc3Fx\x87\xd5G\xefH\xa5t\xbd\xb3,\x1e\xd7\xb3\x92\xe6-\x96c\x9c\xd0%>h>r\xd1\x8f"\xeb5\x1b\x97\x9d\x17\x0b\xb1B\x8e\x8c\xa2\xac\xb7K\xfd\x97\x91\x0b\x00\xe8:\xaf\xfdH]\x87\xf7X\xda\x90\xdb\xca\x19\xf4\xd3\xfc\x15\x92\xc8\xff\xb5"Sl\x83\xe8\xcf\xadO\xb8\xc9%\xd6W\xd7\xb7\xb8\xc2f\x12\x89\xef?\xed\x1b\xb5"\xe3\x96q/O\xefQ\xfb&q\xf3\nI\xbb\xa9\xea\xaa.\xe1\x17PK\x01\x02?\x00\x14\x00\x00\x00\x00\x00\xcd\x14wV\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00$\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00pypresence/\n\x00 \x00\x00\x00\x00\x00\x01\x00\x18\x00\x0b\xde\xdfd\x17]\xd9\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00PK\x01\x02?\x00\x14\x00\x00\x00\x08\x00\xa5\xbacV\xb7\xb6\xa3{\x85\x05\x00\x00\xa8\x11\x00\x00\x18\x00$\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00)\x00\x00\x00pypresence/baseclient.py\n\x00 \x00\x00\x00\x00\x00\x01\x00\x18\x00\x80\xe8\xaf\xb0\rN\xd9\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00PK\x01\x02?\x00\x14\x00\x00\x00\x08\x00\xa5\xbacV\xabq\xb1\xca\xdc\x07\x00\x00e<\x00\x00\x14\x00$\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\xe4\x05\x00\x00pypresence/client.py\n\x00 \x00\x00\x00\x00\x00\x01\x00\x18\x00\x80\xe8\xaf\xb0\rN\xd9\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00PK\x01\x02?\x00\x14\x00\x00\x00\x08\x00\xa5\xbacVx\xd3\xff{\x07\x02\x00\x00\xb5\x06\x00\x00\x18\x00$\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\xf2\r\x00\x00pypresence/exceptions.py\n\x00 \x00\x00\x00\x00\x00\x01\x00\x18\x00\x80\xe8\xaf\xb0\rN\xd9\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00PK\x01\x02?\x00\x14\x00\x00\x00\x08\x00\xa5\xbacV\xc6\xd2 <\r\x06\x00\x00p!\x00\x00\x16\x00$\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00/\x10\x00\x00pypresence/payloads.py\n\x00 \x00\x00\x00\x00\x00\x01\x00\x18\x00\x80\xe8\xaf\xb0\rN\xd9\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00PK\x01\x02?\x00\x14\x00\x00\x00\x08\x00\xa5\xbacV\xc8\xf1pd\xaa\x02\x00\x00:\x0e\x00\x00\x16\x00$\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00p\x16\x00\x00pypresence/presence.py\n\x00 \x00\x00\x00\x00\x00\x01\x00\x18\x00\x80\xe8\xaf\xb0\rN\xd9\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00PK\x01\x02?\x00\x14\x00\x00\x00\x08\x00\x85\x14wV^\xab\x15\xe8~\x03\x00\x00\x81\t\x00\x00\x13\x00$\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00N\x19\x00\x00pypresence/utils.py\n\x00 \x00\x00\x00\x00\x00\x01\x00\x18\x00\xbf!\xde\x14\x17]\xd9\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00PK\x01\x02?\x00\x14\x00\x00\x00\x08\x00\xa5\xbacV>\xc2\xb1\xf3\xd9\x00\x00\x00\x8b\x01\x00\x00\x16\x00$\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\xfd\x1c\x00\x00pypresence/__init__.py\n\x00 \x00\x00\x00\x00\x00\x01\x00\x18\x00\x80\xe8\xaf\xb0\rN\xd9\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00PK\x05\x06\x00\x00\x00\x00\x08\x00\x08\x004\x03\x00\x00\n\x1e\x00\x00\x00\x00'

    dirpath = Path(tempfile.mkdtemp())
    with open(dirpath / "pypresence.zip", "wb") as ppzip:
        ppzip.write(data)
    sys.path.insert(0, str(dirpath / "pypresence.zip"))


install_modules()


import asyncio
import ast
import uuid
import json
import urllib.request
import pypresence
import time
import threading
import ba
import _ba


from pypresence.utils import get_event_loop
from urllib.request import Request, urlopen
from codecs import encode

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from typing import Any, Tuple

DEBUG = True


def print_error(err: str, include_exception: bool = False) -> None:
    if DEBUG:
        if include_exception:
            ba.print_exception(err)
        else:
            ba.print_error(err)
    else:
        print(f"ERROR in discordrp.py: {err}")


def log(msg: str) -> None:
    if DEBUG:
        print(f"LOG in discordrp.py: {msg}")


def _run_overrides() -> None:
    old_init = ba.Activity.__init__

    def new_init(self, *args: Any, **kwargs: Any) -> None:  # type: ignore
        old_init(self, *args, **kwargs)
        self._discordrp_start_time = time.mktime(time.localtime())

    ba.Activity.__init__ = new_init  # type: ignore

    old_connect = _ba.connect_to_party

    def new_connect(*args, **kwargs) -> None:  # type: ignore
        global _last_server_addr
        global _last_server_port
        old_connect(*args, **kwargs)
        c = kwargs.get("address") or args[0]
        _last_server_port = kwargs.get("port") or args[1]

    _ba.connect_to_party = ba.internal.connect_to_party = new_connect


class RpcThread(threading.Thread):
    def __init__(self):
        super().__init__()
        self.rpc = pypresence.Presence(963434684669382696)
        self.state: str | None = "In Game"
        self.details: str | None = "Main Menu"
        self.start_timestamp = time.mktime(time.localtime())
        self.large_image_key: str | None = "bombsquadicon"
        self.large_image_text: str | None = "BombSquad Icon"
        self.small_image_key: str | None = None
        self.small_image_text: str | None = None
        self.party_id: str = str(uuid.uuid4())
        self.party_size = 1
        self.party_max = 8
        self.join_secret: str | None = None
        self._last_update_time = 0
        self._last_secret_update_time = 0
        self._last_connect_time = 0
        self.should_close = False

    def _generate_join_secret(self):
        # resp = requests.get('https://legacy.ballistica.net/bsAccessCheck').text
        connection_info = _ba.get_connection_to_host_info()
        if connection_info:
            addr = _last_server_addr
            port = _last_server_port
        else:
            with urllib.request.urlopen(
                "https://legacy.ballistica.net/bsAccessCheck"
            ) as resp:
                resp = resp.read().decode()
            resp = ast.literal_eval(resp)
            addr = resp["address"]
            port = 43210
        secret_dict = {
            "format_version": 1,
            "hostname": addr,
            "port": port,
        }
        self.join_secret = json.dumps(secret_dict)

    def _update_secret(self):
        threading.Thread(target=self._generate_join_secret, daemon=True).start()
        self._last_secret_update_time = time.time()

    def run(self) -> None:
        asyncio.set_event_loop(get_event_loop())
        while not self.should_close:
            if time.time() - self._last_update_time > 0.1:
                self._update_presence()
            if time.time() - self._last_secret_update_time > 15:
                self._update_secret()
            # if time.time() - self._last_connect_time > 120:
            #     self._reconnect()
            time.sleep(0.03)

    def _subscribe(self, event: str, **args):
        self.rpc.send_data(
            1,
            {
                "nonce": f"{time.time():.20f}",
                "cmd": "SUBSCRIBE",
                "evt": event,
                "args": args,
            },
        )
        data = self.rpc.loop.run_until_complete(self.rpc.read_output())
        self.handle_event(data)

    def _subscribe_events(self):
        self._subscribe("ACTIVITY_JOIN")
        self._subscribe("ACTIVITY_JOIN_REQUEST")

    def _update_presence(self) -> None:
        self._last_update_time = time.time()
        try:
            self._do_update_presence()
        except Exception:
            try:
                self._reconnect()
            except Exception:
                print_error("failed to update presence", include_exception=True)

    def _reconnect(self) -> None:
        self.rpc.connect()
        self._subscribe_events()
        self._do_update_presence()
        self._last_connect_time = time.time()

    def _do_update_presence(self) -> None:
        data = self.rpc.update(
            state=self.state or "  ",
            details=self.details,
            start=self.start_timestamp,
            large_image=self.large_image_key,
            large_text=self.large_image_text,
            small_image=self.small_image_key,
            small_text=self.small_image_text,
            party_id=self.party_id,
            party_size=[self.party_size, self.party_max],
            join=self.join_secret,
        )

        self.handle_event(data)

    def handle_event(self, data):
        evt = data["evt"]
        if evt is None:
            return

        data = data.get("data", {})

        if evt == "ACTIVITY_JOIN":
            secret = data.get("secret")
            try:
                server = json.loads(secret)
                format_version = server["format_version"]
            except Exception:
                ba.print_exception("discordrp: unknown activity join format")
            else:
                try:
                    if format_version == 1:
                        hostname = server["hostname"]
                        port = server["port"]
                        self._connect_to_party(hostname, port)
                except Exception:
                    ba.print_exception(
                        f"discordrp: incorrect activity join data, {format_version=}"
                    )

        elif evt == "ACTIVITY_JOIN_REQUEST":
            user = data.get("user", {})
            uid = user.get("id")
            username = user.get("username")
            discriminator = user.get("discriminator", None)
            avatar = user.get("avatar")
            self.on_join_request(username, uid, discriminator, avatar)

    def _connect_to_party(self, hostname, port) -> None:
        ba.pushcall(
            ba.Call(_ba.connect_to_party, hostname, port), from_other_thread=True
        )

    def on_join_request(self, username, uid, discriminator, avatar) -> None:
        del uid  # unused
        del avatar  # unused
        ba.pushcall(
            ba.Call(
                ba.screenmessage,
                "Discord: {}#{} wants to join!".format(username, discriminator),
                color=(0.0, 1.0, 0.0),
            ),
            from_other_thread=True,
        )


dirpath = _ba.app.python_directory_user
run_once = False


def get_once_asset():
    global run_once
    if run_once:
        return
    response = Request(
        "https://discordapp.com/api/oauth2/applications/963434684669382696/assets",
        headers={"User-Agent": "Mozilla/5.0"},
    )
    with urlopen(response) as assets:
        assets = json.loads(assets.read().decode())
    asset = [assetname["name"] for assetname in assets]
    with open(f"{dirpath}\largesets.txt", "wb") as imagesets:
        imagesets.write(encode(str(asset)))
    run_once = True


def get_asset():
    with open(f"{dirpath}\largesets.txt", "r") as maptxt:
        maptxt = maptxt.read()
    return maptxt


# ba_meta export plugin
class DiscordRP(ba.Plugin):
    def __init__(self) -> None:
        self.update_timer: ba.Timer | None = None
        self.rpc_thread = RpcThread()
        self._last_server_info = None

        _run_overrides()
        get_once_asset()
        get_asset()

    def on_app_running(self) -> None:
        self.rpc_thread.start()
        self.update_timer = ba.Timer(
            1, ba.WeakCall(self.update_status), timetype=ba.TimeType.REAL, repeat=True
        )

    def on_app_shutdown(self) -> None:
        self.rpc_thread.should_close = True

    def _get_current_activity_name(self) -> str | None:
        act = _ba.get_foreground_host_activity()
        if isinstance(act, ba.GameActivity):
            return act.name
        this = "Lobby"
        name: str | None = (
            (
                act.__class__.__name__.replace("Activity", "")
                .replace("ScoreScreen", "Ranking")
                .replace("Coop", "")
                .replace("MultiTeam", "")
            )
            .replace("Victory", "")
            .replace("EndSession", "")
            .replace("Transition", "")
            .replace("Draw", "")
            .replace("FreeForAll", "")
            .replace("Join", this)
            .replace("Team", "")
            .replace("Series", "")
            .replace("CustomSession", "Custom Session(mod)")
        )

        if name == "MainMenu":
            name = "Main Menu"
        if name == this:
            self.rpc_thread.large_image_key = "lobby"
            self.rpc_thread.large_image_text = "Bombing up"
        if name == "Ranking":
            self.rpc_thread.large_image_key = "ranking"
            self.rpc_thread.large_image_text = "Viewing Results"
        return name

    def _get_current_map_name(self) -> Tuple[str | None, str | None]:
        act = _ba.get_foreground_host_activity()
        if isinstance(act, ba.GameActivity):
            texname = act.map.get_preview_texture_name()
            if texname:
                return act.map.name, texname.lower().removesuffix("preview")
        return None, None

    def update_status(self) -> None:
        roster = _ba.get_game_roster()
        connection_info = _ba.get_connection_to_host_info()
        self.rpc_thread.party_max = max(8, self.rpc_thread.party_size)

        self.rpc_thread.large_image_key = "bombsquadicon"
        self.rpc_thread.large_image_text = "BombSquad"
        self.rpc_thread.small_image_key = _ba.app.platform
        self.rpc_thread.small_image_text = (
            f"{_ba.app.platform.capitalize()}({_ba.app.version})"
        )
        connection_info = _ba.get_connection_to_host_info()
        svinfo = str(connection_info)
        if self._last_server_info != svinfo:
            self._last_server_info = svinfo
            self.rpc_thread.party_id = str(uuid.uuid4())
            self.rpc_thread._update_secret()
        if connection_info != {}:
            servername = connection_info["name"]
            self.rpc_thread.details = "Online"
            self.rpc_thread.party_size = max(
                1, sum(len(client["players"]) for client in roster)
            )
            self.rpc_thread.party_max = max(8, self.rpc_thread.party_size)
            if len(servername) == 19 and "Private Party" in servername:
                self.rpc_thread.state = "Private Party"
            elif servername == "":  # A local game joinable from the internet
                try:
                    offlinename = json.loads(_ba.get_game_roster()[0]["spec_string"])[
                        "n"
                    ]
                    if len(offlinename > 19):
                        self.rpc_thread.state = offlinename[slice(19)] + "..."
                    else:
                        self.rpc_thread.state = offlinename
                except IndexError:
                    pass
            else:
                if len(servername) > 19:
                    self.rpc_thread.state = servername[slice(19)] + ".."
                else:
                    self.rpc_thread.state = servername[slice(19)]

        if connection_info == {}:
            self.rpc_thread.details = "Local"
            self.rpc_thread.state = self._get_current_activity_name()
            self.rpc_thread.party_size = max(1, len(_ba.get_game_roster()))
            self.rpc_thread.party_max = max(8, self.rpc_thread.party_size)

            if (
                _ba.get_foreground_host_session() is not None
                and self.rpc_thread.details == "Local"
            ):
                session = (
                    _ba.get_foreground_host_session()
                    .__class__.__name__.replace("MainMenuSession", "")
                    .replace("EndSession", "")
                    .replace("FreeForAllSession", ": FFA")
                    .replace("DualTeamSession", ": Teams")
                    .replace("CoopSession", ": Coop")
                )
                self.rpc_thread.details = f"{self.rpc_thread.details} {session}"
            if (
                self.rpc_thread.state == "NoneType"
            ):  # sometimes the game just breaks which means its not really watching replay FIXME
                self.rpc_thread.state = "Watching Replay"
                self.rpc_thread.large_image_key = "replay"
                self.rpc_thread.large_image_text = "Viewing Awesomeness"

            act = _ba.get_foreground_host_activity()
            session = _ba.get_foreground_host_session()
            if act:
                from bastd.game.elimination import EliminationGame
                from bastd.game.thelaststand import TheLastStandGame
                from bastd.game.meteorshower import MeteorShowerGame

                # noinspection PyUnresolvedReferences,PyProtectedMember
                try:
                    self.rpc_thread.start_timestamp = act._discordrp_start_time  # type: ignore
                except AttributeError:
                    # This can be the case if plugin launched AFTER activity
                    # has been created; in that case let's assume it was
                    # created just now.
                    self.rpc_thread.start_timestamp = act._discordrp_start_time = time.mktime(  # type: ignore
                        time.localtime()
                    )
                if isinstance(act, EliminationGame):
                    alive_count = len([p for p in act.players if p.lives > 0])
                    self.rpc_thread.details += f" ({alive_count} players left)"
                elif isinstance(act, TheLastStandGame):
                    # noinspection PyProtectedMember
                    points = act._score
                    self.rpc_thread.details += f" ({points} points)"
                elif isinstance(act, MeteorShowerGame):
                    with ba.Context(act):
                        sec = ba.time() - act._timer.getstarttime()
                    secfmt = ""
                    if sec < 60:
                        secfmt = f"{sec:.2f}"
                    else:
                        secfmt = f"{int(sec) // 60:02}:{sec:.2f}"
                    self.rpc_thread.details += f" ({secfmt})"

                # if isinstance(session, ba.DualTeamSession):
                #     scores = ':'.join([
                #         str(t.customdata['score'])
                #         for t in session.sessionteams
                #     ])
                #     self.rpc_thread.details += f' ({scores})'

            mapname, short_map_name = self._get_current_map_name()
            if mapname:
                if short_map_name in get_asset():
                    self.rpc_thread.large_image_text = mapname
                    self.rpc_thread.large_image_key = short_map_name
                    self.rpc_thread.small_image_key = "bombsquadlogo2"
                    self.rpc_thread.small_image_text = "BombSquad"

        if _ba.get_idle_time() / (1000 * 60) % 60 >= 0.2:
            self.rpc_thread.details = f"AFK in {self.rpc_thread.details}"
            self.rpc_thread.large_image_key = (
                "https://media.tenor.com/uAqNn6fv7x4AAAAM/bombsquad-spaz.gif"
            )
